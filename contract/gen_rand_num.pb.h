// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gen_rand_num.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gen_5frand_5fnum_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gen_5frand_5fnum_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gen_5frand_5fnum_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_gen_5frand_5fnum_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gen_5frand_5fnum_2eproto;
namespace mini_rpc {
namespace generate_rand {
class Request;
struct RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Response;
struct ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
}  // namespace generate_rand
}  // namespace mini_rpc
PROTOBUF_NAMESPACE_OPEN
template<> ::mini_rpc::generate_rand::Request* Arena::CreateMaybeMessage<::mini_rpc::generate_rand::Request>(Arena*);
template<> ::mini_rpc::generate_rand::Response* Arena::CreateMaybeMessage<::mini_rpc::generate_rand::Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mini_rpc {
namespace generate_rand {

// ===================================================================

class Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mini_rpc.generate_rand.Request) */ {
 public:
  inline Request() : Request(nullptr) {}
  ~Request() override;
  explicit PROTOBUF_CONSTEXPR Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Request& from) {
    Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mini_rpc.generate_rand.Request";
  }
  protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContractIdFieldNumber = 1,
    kMinFieldNumber = 2,
    kMaxFieldNumber = 3,
  };
  // required string contract_id = 1 [default = "generate_rand"];
  bool has_contract_id() const;
  private:
  bool _internal_has_contract_id() const;
  public:
  void clear_contract_id();
  const std::string& contract_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_contract_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_contract_id();
  PROTOBUF_NODISCARD std::string* release_contract_id();
  void set_allocated_contract_id(std::string* contract_id);
  private:
  const std::string& _internal_contract_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contract_id(const std::string& value);
  std::string* _internal_mutable_contract_id();
  public:

  // optional int32 min = 2;
  bool has_min() const;
  private:
  bool _internal_has_min() const;
  public:
  void clear_min();
  int32_t min() const;
  void set_min(int32_t value);
  private:
  int32_t _internal_min() const;
  void _internal_set_min(int32_t value);
  public:

  // optional int32 max = 3;
  bool has_max() const;
  private:
  bool _internal_has_max() const;
  public:
  void clear_max();
  int32_t max() const;
  void set_max(int32_t value);
  private:
  int32_t _internal_max() const;
  void _internal_set_max(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mini_rpc.generate_rand.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_contract_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_id_;
    int32_t min_;
    int32_t max_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gen_5frand_5fnum_2eproto;
};
// -------------------------------------------------------------------

class Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mini_rpc.generate_rand.Response) */ {
 public:
  inline Response() : Response(nullptr) {}
  ~Response() override;
  explicit PROTOBUF_CONSTEXPR Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Response& from) {
    Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mini_rpc.generate_rand.Response";
  }
  protected:
  explicit Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContractIdFieldNumber = 1,
    kRandNumFieldNumber = 2,
  };
  // required string contract_id = 1 [default = "generate_rand"];
  bool has_contract_id() const;
  private:
  bool _internal_has_contract_id() const;
  public:
  void clear_contract_id();
  const std::string& contract_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_contract_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_contract_id();
  PROTOBUF_NODISCARD std::string* release_contract_id();
  void set_allocated_contract_id(std::string* contract_id);
  private:
  const std::string& _internal_contract_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contract_id(const std::string& value);
  std::string* _internal_mutable_contract_id();
  public:

  // optional int32 rand_num = 2;
  bool has_rand_num() const;
  private:
  bool _internal_has_rand_num() const;
  public:
  void clear_rand_num();
  int32_t rand_num() const;
  void set_rand_num(int32_t value);
  private:
  int32_t _internal_rand_num() const;
  void _internal_set_rand_num(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mini_rpc.generate_rand.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_contract_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_id_;
    int32_t rand_num_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gen_5frand_5fnum_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Request

// required string contract_id = 1 [default = "generate_rand"];
inline bool Request::_internal_has_contract_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Request::has_contract_id() const {
  return _internal_has_contract_id();
}
inline void Request::clear_contract_id() {
  _impl_.contract_id_.ClearToDefault(::mini_rpc::generate_rand::Request::Impl_::_i_give_permission_to_break_this_code_default_contract_id_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Request::contract_id() const {
  // @@protoc_insertion_point(field_get:mini_rpc.generate_rand.Request.contract_id)
  if (_impl_.contract_id_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_contract_id_.get();
  return _internal_contract_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Request::set_contract_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.contract_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mini_rpc.generate_rand.Request.contract_id)
}
inline std::string* Request::mutable_contract_id() {
  std::string* _s = _internal_mutable_contract_id();
  // @@protoc_insertion_point(field_mutable:mini_rpc.generate_rand.Request.contract_id)
  return _s;
}
inline const std::string& Request::_internal_contract_id() const {
  return _impl_.contract_id_.Get();
}
inline void Request::_internal_set_contract_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.contract_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Request::_internal_mutable_contract_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.contract_id_.Mutable(::mini_rpc::generate_rand::Request::Impl_::_i_give_permission_to_break_this_code_default_contract_id_, GetArenaForAllocation());
}
inline std::string* Request::release_contract_id() {
  // @@protoc_insertion_point(field_release:mini_rpc.generate_rand.Request.contract_id)
  if (!_internal_has_contract_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.contract_id_.Release();
  return p;
}
inline void Request::set_allocated_contract_id(std::string* contract_id) {
  if (contract_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.contract_id_.SetAllocated(contract_id, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:mini_rpc.generate_rand.Request.contract_id)
}

// optional int32 min = 2;
inline bool Request::_internal_has_min() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Request::has_min() const {
  return _internal_has_min();
}
inline void Request::clear_min() {
  _impl_.min_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t Request::_internal_min() const {
  return _impl_.min_;
}
inline int32_t Request::min() const {
  // @@protoc_insertion_point(field_get:mini_rpc.generate_rand.Request.min)
  return _internal_min();
}
inline void Request::_internal_set_min(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.min_ = value;
}
inline void Request::set_min(int32_t value) {
  _internal_set_min(value);
  // @@protoc_insertion_point(field_set:mini_rpc.generate_rand.Request.min)
}

// optional int32 max = 3;
inline bool Request::_internal_has_max() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Request::has_max() const {
  return _internal_has_max();
}
inline void Request::clear_max() {
  _impl_.max_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t Request::_internal_max() const {
  return _impl_.max_;
}
inline int32_t Request::max() const {
  // @@protoc_insertion_point(field_get:mini_rpc.generate_rand.Request.max)
  return _internal_max();
}
inline void Request::_internal_set_max(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.max_ = value;
}
inline void Request::set_max(int32_t value) {
  _internal_set_max(value);
  // @@protoc_insertion_point(field_set:mini_rpc.generate_rand.Request.max)
}

// -------------------------------------------------------------------

// Response

// required string contract_id = 1 [default = "generate_rand"];
inline bool Response::_internal_has_contract_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Response::has_contract_id() const {
  return _internal_has_contract_id();
}
inline void Response::clear_contract_id() {
  _impl_.contract_id_.ClearToDefault(::mini_rpc::generate_rand::Response::Impl_::_i_give_permission_to_break_this_code_default_contract_id_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Response::contract_id() const {
  // @@protoc_insertion_point(field_get:mini_rpc.generate_rand.Response.contract_id)
  if (_impl_.contract_id_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_contract_id_.get();
  return _internal_contract_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Response::set_contract_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.contract_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mini_rpc.generate_rand.Response.contract_id)
}
inline std::string* Response::mutable_contract_id() {
  std::string* _s = _internal_mutable_contract_id();
  // @@protoc_insertion_point(field_mutable:mini_rpc.generate_rand.Response.contract_id)
  return _s;
}
inline const std::string& Response::_internal_contract_id() const {
  return _impl_.contract_id_.Get();
}
inline void Response::_internal_set_contract_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.contract_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Response::_internal_mutable_contract_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.contract_id_.Mutable(::mini_rpc::generate_rand::Response::Impl_::_i_give_permission_to_break_this_code_default_contract_id_, GetArenaForAllocation());
}
inline std::string* Response::release_contract_id() {
  // @@protoc_insertion_point(field_release:mini_rpc.generate_rand.Response.contract_id)
  if (!_internal_has_contract_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.contract_id_.Release();
  return p;
}
inline void Response::set_allocated_contract_id(std::string* contract_id) {
  if (contract_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.contract_id_.SetAllocated(contract_id, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:mini_rpc.generate_rand.Response.contract_id)
}

// optional int32 rand_num = 2;
inline bool Response::_internal_has_rand_num() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Response::has_rand_num() const {
  return _internal_has_rand_num();
}
inline void Response::clear_rand_num() {
  _impl_.rand_num_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t Response::_internal_rand_num() const {
  return _impl_.rand_num_;
}
inline int32_t Response::rand_num() const {
  // @@protoc_insertion_point(field_get:mini_rpc.generate_rand.Response.rand_num)
  return _internal_rand_num();
}
inline void Response::_internal_set_rand_num(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.rand_num_ = value;
}
inline void Response::set_rand_num(int32_t value) {
  _internal_set_rand_num(value);
  // @@protoc_insertion_point(field_set:mini_rpc.generate_rand.Response.rand_num)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace generate_rand
}  // namespace mini_rpc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gen_5frand_5fnum_2eproto
